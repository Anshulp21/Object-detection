"""
YOLOv5 Training Helper
- Runs training with IDD-Lite data YAML configuration
- Executes YOLOv5 from Python using subprocess
"""
from __future__ import annotations
import sys
import subprocess
from pathlib import Path
from typing import Optional


def trainYolov5(
    dataYaml: Path,
    weights: str = "yolov5s.pt",
    imgsz: int = 640,
    epochs: int = 10,
    batch: int = 16,
    device: str = "cpu",
    project: str = "runs_idd",
    name: str = "exp",
) -> int:
    """Launches YOLOv5 training.
    dataYaml: Path to data/idd_lite.yaml configuration file
    weights: Initial weights (e.g., yolov5s.pt)
    device: Device to use - "cpu" or "0" (if GPU is available)
    return: Process return code
    """
    dataYaml = Path(dataYaml).resolve()
    # Prefer yolov5 CLI installed by the pip package; fallback to 'yolo' if present
    cli = "yolov5"
    # On Windows, both 'yolov5' and 'yolov5.exe' resolve via PATHEXT
    cmd = [
        cli,
        "train",
        "--img",
        str(imgsz),
        "--epochs",
        str(epochs),
        "--batch",
        str(batch),
        "--data",
        str(dataYaml),
        "--weights",
        weights,
        "--project",
        project,
        "--name",
        name,
        "--exist-ok",
        "--device",
        device,
    ]
    try:
        print("[INFO] YOLOv5 training command:", " ".join(cmd))
        proc = subprocess.run(cmd)
        return proc.returncode
    except FileNotFoundError:
        # Fallback to 'yolo' CLI (Ultralytics package)
        cmd[0] = "yolo"
        print("[INFO] Falling back to 'yolo' CLI. Command:", " ".join(cmd))
        proc = subprocess.run(cmd)
        return proc.returncode
    


if __name__ == "__main__":
    import argparse
    p = argparse.ArgumentParser(description="YOLOv5 training for IDD-Lite dataset")
    # Default data yaml generated by data_pipeline.py
    DEFAULT_DATA_YAML = Path(__file__).resolve().parent / "data" / "idd_lite.yaml"
    p.add_argument("--data_yaml", type=str, required=False, default=str(DEFAULT_DATA_YAML))
    p.add_argument("--weights", type=str, default="yolov5s.pt")
    p.add_argument("--imgsz", type=int, default=640)
    p.add_argument("--epochs", type=int, default=1)
    p.add_argument("--batch", type=int, default=16)
    p.add_argument("--device", type=str, default="cpu")
    p.add_argument("--project", type=str, default="runs_idd")
    p.add_argument("--name", type=str, default="exp")
    args = p.parse_args()

    rc = trainYolov5(
        dataYaml=Path(args.data_yaml),
        weights=args.weights,
        imgsz=args.imgsz,
        epochs=args.epochs,
        batch=args.batch,
        device=args.device,
        project=args.project,
        name=args.name,
    )
    raise SystemExit(rc)
